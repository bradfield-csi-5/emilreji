
./dotproduct.o:     file format elf64-x86-64


Disassembly of section .text:

0000000000000000 <dotproduct>:
   0:	f3 0f 1e fa          	endbr64 
   4:	55                   	push   %rbp                   ; rbp value storing onto stack
   5:	48 89 e5             	mov    %rsp,%rbp              ; moving rbp value to stack pointer??
   8:	48 83 ec 40          	sub    $0x40,%rsp             ; subtracting 64 aka size of long from stack pointer
   c:	48 89 7d c8          	mov    %rdi,-0x38(%rbp)
  10:	48 89 75 c0          	mov    %rsi,-0x40(%rbp)
  14:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax          ; https://stackoverflow.com/questions/10810203/what-is-the-fs-gs-register-intended-for
  1b:	00 00 
  1d:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  21:	31 c0                	xor    %eax,%eax
  23:	48 c7 45 e8 00 00 00 	movq   $0x0,-0x18(%rbp)
  2a:	00 
  2b:	48 c7 45 f0 00 00 00 	movq   $0x0,-0x10(%rbp)
  32:	00 
  33:	eb 43                	jmp    78 <dotproduct+0x78>
  35:	48 8d 55 d8          	lea    -0x28(%rbp),%rdx
  39:	48 8b 4d f0          	mov    -0x10(%rbp),%rcx
  3d:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  41:	48 89 ce             	mov    %rcx,%rsi
  44:	48 89 c7             	mov    %rax,%rdi
  47:	e8 00 00 00 00       	call   4c <dotproduct+0x4c>
  4c:	48 8d 55 e0          	lea    -0x20(%rbp),%rdx
  50:	48 8b 4d f0          	mov    -0x10(%rbp),%rcx
  54:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  58:	48 89 ce             	mov    %rcx,%rsi
  5b:	48 89 c7             	mov    %rax,%rdi
  5e:	e8 00 00 00 00       	call   63 <dotproduct+0x63>
  63:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
  67:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  6b:	48 0f af c2          	imul   %rdx,%rax
  6f:	48 01 45 e8          	add    %rax,-0x18(%rbp)
  73:	48 83 45 f0 01       	addq   $0x1,-0x10(%rbp)
  78:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  7c:	48 89 c7             	mov    %rax,%rdi
  7f:	e8 00 00 00 00       	call   84 <dotproduct+0x84>
  84:	48 39 45 f0          	cmp    %rax,-0x10(%rbp)
  88:	7c ab                	jl     35 <dotproduct+0x35>
  8a:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  8e:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  92:	64 48 2b 14 25 28 00 	sub    %fs:0x28,%rdx
  99:	00 00 
  9b:	74 05                	je     a2 <dotproduct+0xa2>
  9d:	e8 00 00 00 00       	call   a2 <dotproduct+0xa2>
  a2:	c9                   	leave  
  a3:	c3                   	ret    
